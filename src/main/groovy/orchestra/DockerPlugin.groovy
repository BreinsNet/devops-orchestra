/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package orchestra

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.provider.Property

interface DockerPluginExtension {

    Property<String> getTag()
    Property<String> getImageName()
    Property<String> getServicePort()
    Property<String> getUrl()

}

class DockerPlugin {

    static void importTasks(Project project, Plugin plugin, String dockerImageAndTag) {
        DockerPluginExtension extension = project.extensions.create('docker', DockerPluginExtension)

        extension.servicePort.convention('')

        project.task('dockerLint') {
            doLast {
                String script = 'docker-lint.sh'

                FileUtil.runWrapperScript(project, plugin, script)
            }
        }

        project.task('dockerBuild') {
            doLast {
                String tag = extension.tag.get()
                String url = extension.url.get()
                String imageName = extension.imageName.get()

                String script = 'docker-build.sh'
                List<String> params = ["${url}/${imageName}:${tag}"]

                FileUtil.runWrapperScript(project, plugin, script, params)
            }
        }

        project.task('dockerTest') {
            doLast {
                String tag = extension.tag.get()
                String url = extension.url.get()
                String imageName = extension.imageName.get()
                String servicePort = extension.servicePort.get()

                String script = 'docker-test.sh'
                List<String> params = []

                Map<String,String> envParams = [
                    BATS_TAG: tag,
                    BATS_IMAGE_NAME: imageName,
                    BATS_URL: url,
                    BATS_SERVICE_PORT: servicePort
                ]

                FileUtil.copyFileFromPlugin(plugin, 'artifacts/bats.tar', "${project.buildDir}/bats.tar")
                FileUtil.runWrapperScript(project, plugin, script, params, envParams)
            }
        }

        project.task('dockerPush') {
            doLast {
                String tag = extension.tag.get()
                String url = extension.url.get()
                String imageName = extension.imageName.get()

                String script = 'docker-push.sh'
                List<String> params = ["${url}/${imageName}:${tag}"]

                FileUtil.runWrapperScript(project, plugin, script, params)
            }
        }

        project.task('dockerScan') {
            doLast {
                String tag = extension.tag.get()
                String url = extension.url.get()
                String imageName = extension.imageName.get()

                String script = 'docker-scan.sh'
                List<String> params = ["${url}/${imageName}:${tag}"]

                FileUtil.runWrapperScript(project, plugin, script, params)
            }
        }

        project.task('dockerEcrTagCheck') {
            doLast {
                String tag = extension.tag.get()
                String imageName = extension.imageName.get()

                String script = 'docker-ecr-tag-check.sh'
                List<String> params = [imageName, tag]

                FileUtil.runWrapperScript(project, plugin, script, params)
            }
        }
    }

}
